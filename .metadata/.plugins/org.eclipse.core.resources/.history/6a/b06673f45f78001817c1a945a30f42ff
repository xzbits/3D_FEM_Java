package oofem;

import java.util.ArrayList;
import iceb.jnumerics.*;
import iceb.jnumerics.lse.GeneralMatrixLSESolver;
import iceb.jnumerics.lse.ILSESolver;
import inf.text.ArrayFormat;

public class Structure {
	private ArrayList<Node> nodes = new ArrayList<Node>();
	private ArrayList<Element> elements = new ArrayList<Element>();
	
	public Node addNode(double x1, double x2, double x3) {
		this.nodes.add(new Node(x1, x2, x3));
		return this.getNode(this.getNumberOfNodes() -1);
	}
	
	public Element addElement(double e, double a, int n1, int n2) {
		this.elements.add(new Element(e, a, this.getNode(n1), this.getNode(n2)));
		return this.getElement(this.getNumberOfElements() -1);
	}
	
	public int getNumberOfNodes() {
		return this.nodes.size();
	}
	
	public Node getNode(int id) {
		return this.nodes.get(id);
	}
	
	public int getNumberOfElements() {
		return this.elements.size();
	}
	
	public Element getElement(int id) {
		return this.elements.get(id);
	}
	
	public void printStructure() {
		
	}
	
	public void solve() {
		int Nequ = this.enumerateDOFs();
		ILSESolver sol = new GeneralMatrixLSESolver();
		QuadraticMatrixInfo info = sol.getAInfo();
		
		info.setSize(Nequ);
		sol.initialize();
		
		IMatrix Kg = sol.getA();
		double[] Fg = new double[Nequ];
		
		this.assembleStiffnessMatrix(Kg);
		this.assembleLoadVector(Fg);
		
		try {
			sol.solve(Fg);
		} catch (SolveFailedException e) {
			System.out.println("Solve failed:" + e.getMessage());
		}
		this.selectDisplacements(Fg);
	}
	
	private int enumerateDOFs() {
		int start = 0;
		for(int i = 0; i < this.getNumberOfNodes(); i++) {
			start = this.nodes.get(i).enumerateDOFs(start);
		}
		for(int i = 0; i < this.getNumberOfElements(); i++) {
			this.elements.get(i).enumerateDOFs();
		}
		return start;
	}
	
	private void assembleLoadVector(double[] rGlobal) {
		for(int i = 0; i < this.getNumberOfNodes(); i++) {
			int[] Ndof = this.getNode(i).getDOFNumbers();
			Force f = this.getNode(i).getForce();
			for(int j =0; j < this.getNode(i).getDOFNumbers().length; j++) {
				int rIndex = Ndof[j];
				if(rIndex != 1) {
					rGlobal[rIndex] += f.getComponent(j);
				}
			}
		}
	}
	
	private void assembleStiffnessMatrix(IMatrix kGlobal) {
		for(int i = 0; i < this.getNumberOfElements(); i++) {
			int[] Edof = this.getElement(i).getDOFNumbers();
			IMatrix Ke = this.getElement(i).computeStiffnessIMatrix();
			for(int j = 0; j < this.getElement(i).getDOFNumbers().length; j++) {
				for(int k = 0; k < this.getElement(i).getDOFNumbers().length; k++) {
					int matrixIndex1 = Edof[i];
					int matrixIndex2 = Edof[j];
					if(matrixIndex1 != -1 && matrixIndex2 != -1) {
						kGlobal.add(matrixIndex1, matrixIndex2, Ke.get(i, j));
					}
				}
			}
		}
	}
	
	private void selectDisplacements(double[] uGlobal) {
		for(int i = 0; i < this.getNumberOfNodes(); i++) {
			int[] Ndof = this.getNode(i).getDOFNumbers();
			double[] Ndisp = new double[3];
			for(int j = 0; j < this.getNode(i).getDOFNumbers().length; j++) {
				if(Ndof[j] == -1) {
					Ndisp[j] = 0;
				} else {
					Ndisp[j] = uGlobal[Ndof[j]];
				}
			}
		}
	}
	
	@SuppressWarnings("null")
	public void printResults() {
		System.out.println("Listing structure");
		System.out.println("Nodes");
		String[] a = new String[] {"idx","x1","x2","x3"};
		System.out.println(ArrayFormat.format(a));
		for(int i = 0; i < this.getNumberOfNodes(); i++) {
		System.out.print(i + " ");
		this.getNode(i).print();
		}
		
		System.out.println();
		
		System.out.println("Constraints");
		String[] b = new String[] {"node","u1","u2","u3"};
		System.out.println(ArrayFormat.format(b));
		for (int i = 0; i < this.getNumberOfNodes(); i++) {
			System.out.print(i + " ");
			this.getNode(i).getConstraint().print();
			}
		
		System.out.println();
		
		System.out.println("Forces");
		String[] c = new String[] {"node","r1","r2","r3"};
		System.out.println(ArrayFormat.format(c));
		for (int i = 0; i < this.getNumberOfNodes(); i++) {
			System.out.print(i + " ");
			this.getNode(i).getForce().print();
			}
		
		System.out.println();
		
		System.out.println("Elements");
		String[] d = new String[] {"idx","E","A","L"};
		System.out.println(ArrayFormat.format(d));
		for (int i = 0; i < this.getNumberOfElements(); i++) {
			System.out.print(i + " ");
			this.getElement(i).print();
			}
		
		System.out.println();
		System.out.println();
		
		System.out.println("Listing analysis results");
		
		System.out.println();
		
		System.out.println("Displacements");
		String[] e = new String[] {"node","u1","u2","u3"};
		System.out.println(ArrayFormat.format(e));
		for (int i = 0; i < this.getNumberOfNodes(); i++) {
			double[] uG = null;
			this.selectDisplacements(uG);
			System.out.print(i + " " + uG.toString());
			}
		
		System.out.println();
		
		System.out.println("Element forces");
		String[] f = new String[] {"elem","force"};
		System.out.println(ArrayFormat.format(f));
	}
}






















